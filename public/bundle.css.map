{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte"
  ],
  "sourcesContent": [
    "<header>\n\t<nav class=\"navbar shadow-sm\">\n\t\t<a\n\t\t class=\"navbar-brand text-white\"\n\t\t href=\"/\"\n\t\t>French address navigator</a>\n\t</nav>\n</header>\n<svelte:window on:resize={resize} />\n<main\n role=\"main\"\n class=\"container-fluid my-4\"\n>\n\t<div class=\"row justify-content-center\">\n\t\t<div class=\"col-sm-12 col-md-8 col-lg-6\">\n\t\t\t<form>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<div class=\"input-group shadow-sm\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t bind:value={address}\n\t\t\t\t\t\t on:input=\"{e => getAddresses(e.target.value)}\"\n\t\t\t\t\t\t class=\"form-control form-control-lg\"\n\t\t\t\t\t\t type=\"text\"\n\t\t\t\t\t\t placeholder=\"Type the address\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"input-group-append\">\n\t\t\t\t\t\t\t<span class=\"input-group-text\">\n\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t aria-hidden=\"true\"\n\t\t\t\t\t\t\t\t class=\"material-icons\"\n\t\t\t\t\t\t\t\t> search </i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{#if addressLoading}\n\t\t\t\t\t<div class=\"progress\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t class=\"progress-bar progress-bar-striped progress-bar-animated\"\n\t\t\t\t\t\t role=\"progressbar\"\n\t\t\t\t\t\t aria-valuenow=\"75\"\n\t\t\t\t\t\t aria-valuemin=\"0\"\n\t\t\t\t\t\t aria-valuemax=\"100\"\n\t\t\t\t\t\t style=\"width: 100%\"\n\t\t\t\t\t\t></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t<div class=\"row justify-content-center\">\n\t\t<div\n\t\t class=\"col-sm-12 col-md-8 col-lg-6\"\n\t\t bind:this={addressTableRow}\n\t\t>\n\t\t\t<table class=\"table table-bordered shadow-sm\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"col\">City</th>\n\t\t\t\t\t\t<th\n\t\t\t\t\t\t style=\"cursor: pointer;\"\n\t\t\t\t\t\t scope=\"col\"\n\t\t\t\t\t\t on:click={setNameSortAscending}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t class=\"material-icons\"\n\t\t\t\t\t\t\t style=\"font-size: 16px; width: 16px; height: 16pxd;\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{#if nameSortAscending != null} {#if nameSortAscending} arrow_upward {:else}\n\t\t\t\t\t\t\t\tarrow_downward {/if} {/if}\n\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{#each sortedByNameSearchedAddresses as sa}\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>{sa.properties.city}</td>\n\t\t\t\t\t\t<td>{sa.properties.name}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t{:else}\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td\n\t\t\t\t\t\t colspan=\"2\"\n\t\t\t\t\t\t class=\"text-center\"\n\t\t\t\t\t\t>No data available</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t{/each}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t</div>\n\t<div class=\"row justify-content-center\">\n\t\t<div class=\"col-sm-12 col-md-8 col-lg-6\">\n\t\t\t<div\n\t\t\t bind:this={mapContainer}\n\t\t\t class=\"shadow-sm\"\n\t\t\t style=\"height: {mapSize}px;\"\n\t\t\t>\n\t\t\t\t<!-- map is rendered here -->\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</main>\n<footer class=\"footer shadow-sm\">\n\t<div class=\"container-fluid\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col\">\n\t\t\t\t<span class=\"text-white\">Made with love by Yuriy Â© 2019 - Eternity.</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</footer>\n\n<script>\n\timport axios from \"axios\";\n\timport { onMount } from \"svelte\";\n\timport GoogleMapsLoader from \"google-maps\";\n\n\tconst sortDirectionMap = {\n\t  true: false,\n\t  false: null,\n\t  null: true\n\t};\n\tconst calculateWidth = element => {\n\t  const computedStyle = getComputedStyle(element);\n\n\t  const elementWidth =\n\t    element.clientWidth -\n\t    parseFloat(computedStyle.paddingLeft) -\n\t    parseFloat(computedStyle.paddingRight);\n\n\t  return elementWidth;\n\t};\n\n\tonMount(() => {\n\t  GoogleMapsLoader.VERSION = \"weekly\";\n\t  GoogleMapsLoader.KEY = \"AIzaSyBFh-jqQ8z_YHhtAARbG0nVIZCGyGa_jN4\";\n\t  GoogleMapsLoader.load(googleParam => {\n\t    google = googleParam;\n\t    map = new google.maps.Map(mapContainer, {\n\t      center: { lat: 0, lng: 0 },\n\t      zoom: 8\n\t    });\n\t    mapSize = calculateWidth(addressTableRow);\n\t  });\n\t});\n\n\tlet map = null;\n\tlet google = null;\n\tlet mapSize = 0;\n\tlet addressMarkers = [];\n\tlet address = \"\";\n\tlet addressLoading = false;\n\tlet searchedAddresses = [];\n\tlet nameSortAscending = null;\n\n\tlet addressTableRow = null;\n\tlet mapContainer = null;\n\n\tlet sortedByNameSearchedAddresses = [];\n\n\t$: {\n\t  if (\n\t    !searchedAddresses ||\n\t    searchedAddresses.length === 0 ||\n\t    nameSortAscending == null\n\t  ) {\n\t    sortedByNameSearchedAddresses = searchedAddresses;\n\t  }\n\t}\n\n\t$: {\n\t  if (\n\t    searchedAddresses &&\n\t    searchedAddresses.length > 0 &&\n\t    nameSortAscending !== null\n\t  ) {\n\t    const sorted = [...searchedAddresses].sort((a, b) =>\n\t      a.properties.name.localeCompare(b.properties.name)\n\t    );\n\n\t    sortedByNameSearchedAddresses = nameSortAscending\n\t      ? sorted\n\t      : sorted.reverse();\n\t  }\n\t}\n\n\tasync function getAddresses(newAddress) {\n\t  try {\n\t    newAddress = newAddress.trim();\n\t    if (addressMarkers.length > 0) {\n\t      for (const marker of addressMarkers) {\n\t        marker.setMap(null);\n\t      }\n\t      addressMarkers = [];\n\t    }\n\n\t    if (!address) {\n\t      searchedAddresses = [];\n\t      return;\n\t    }\n\n\t    addressLoading = true;\n\n\t    const response = await axios.get(\n\t      \"https://api-adresse.data.gouv.fr/search\",\n\t      {\n\t        params: {\n\t          q: address\n\t        }\n\t      }\n\t    );\n\n\t    const searchedAddressesResponse = response.data.features;\n\n\t    const bounds = new google.maps.LatLngBounds();\n\t    const addressMarkersNew = [];\n\t    searchedAddressesResponse.forEach(feature => {\n\t      const position = {\n\t        lat: feature.geometry.coordinates[1],\n\t        lng: feature.geometry.coordinates[0]\n\t      };\n\n\t      const marker = new google.maps.Marker({\n\t        position,\n\t        map: map,\n\t        title: feature.properties.name\n\t      });\n\n\t      bounds.extend(marker.getPosition());\n\n\t      addressMarkersNew.push(marker);\n\t    });\n\n\t    map.fitBounds(bounds);\n\n\t    searchedAddresses = searchedAddressesResponse;\n\t    addressMarkers = addressMarkersNew;\n\t  } catch (error) {\n\t    console.error(error);\n\t  } finally {\n\t    addressLoading = false;\n\t  }\n\t}\n\n\tfunction resize(event) {\n\t  mapSize = calculateWidth(addressTableRow);\n\t}\n\tfunction setNameSortAscending(params) {\n\t  nameSortAscending = sortDirectionMap[nameSortAscending];\n\t}\n</script>\n\n<style>\n  /* Sticky footer styles */\n  html {\n    position: relative;\n    min-height: 100%;\n  }\n  body {\n    /* Margin bottom by footer height */\n    margin-bottom: 60px;\n  }\n  .navbar {\n    background-color: rgb(63, 81, 181);\n  }\n  .footer {\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n    /* Set the fixed height of the footer here */\n    height: 40px;\n    line-height: 40px; /* Vertically center the text there */\n    background-color: rgb(63, 81, 181);\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAyQE,OAAO,cAAC,CAAC,AACP,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACpC,CAAC,AACD,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,KAAK,CACf,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CAEX,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACpC,CAAC"
}